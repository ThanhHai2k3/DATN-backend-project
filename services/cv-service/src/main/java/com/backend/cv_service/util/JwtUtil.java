package com.backend.cv_service.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import com.backend.cv_service.service.JwtService;
import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.util.UUID;

@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secretKey;

    /**
     * Tr√≠ch xu·∫•t studentId (UUID) t·ª´ header "Authorization".
     * @param authorizationHeader Chu·ªói ƒë·∫ßy ƒë·ªß, v√≠ d·ª•: "Bearer eyJhbGciOiJI..."
     * @return UUID c·ªßa ng∆∞·ªùi d√πng.
     */
    public UUID extractUserIdFromToken(String authorizationHeader) {
        if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            throw new IllegalArgumentException("Invalid Authorization header");
        }

        // 1. T√°ch chu·ªói "Bearer " ƒë·ªÉ l·∫•y ph·∫ßn token
        String token = authorizationHeader.substring(7);

        try {
            // 2. Gi·∫£i m√£ token d√πng secret key
            Claims claims = Jwts.parser()
                    .verifyWith(Keys.hmacShaKeyFor(secretKey.getBytes(StandardCharsets.UTF_8))) // üëà thay cho setSigningKey
                    .build()
                    .parseSignedClaims(token)
                    .getPayload();


            // 3. L·∫•y ra subject ("sub"), th∆∞·ªùng l√† ID c·ªßa ng∆∞·ªùi d√πng
            String userIdAsString = claims.getSubject();

            // 4. Chuy·ªÉn ƒë·ªïi t·ª´ String sang UUID
            return UUID.fromString(userIdAsString);

        } catch (Exception e) {
            // X·ª≠ l√Ω c√°c l·ªói gi·∫£i m√£ token (h·∫øt h·∫°n, kh√¥ng h·ª£p l·ªá, ...)
            // Trong th·ª±c t·∫ø, b·∫°n n√™n log l·ªói n√†y ra
            throw new RuntimeException("Unable to parse JWT token", e);
        }
    }
}